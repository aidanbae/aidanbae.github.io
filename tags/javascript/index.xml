<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/tags/javascript/</link>
    <description>Recent content in javascript on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Sep 2018 09:31:27 +0100</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>빅오 표기법(Big O notation)과 자바스크립트</title>
      <link>https://aidanbae.github.io/code/algorithm/bigo/</link>
      <pubDate>Thu, 20 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/algorithm/bigo/</guid>
      <description>오늘은 컴퓨터과학의 꽃, 알고리즘의 인트로에 늘 나오는 빅오표기법에 대해서 이야기해보고자한다! +_ +
대학생 때, 삼성SCSS 덕분에 컴퓨터과학을 늦게 접하면서 시립대에서 김진석 교수님 알고리즘 수업을 야간에 들었었는데 컴퓨터과학 전공자와 비전공자를 나누는 기준이 알고리즘이며 알고리즘의 효율성을 판별하는 빅오표기법은 매우 중요해요라고 콕 찦어 말하신게 기억에 남는다.
스타트업에 있을 때는 되게하는데 바빠 빅오표기법을 고민한 적이 없었고, 현업에 들어와서 게임프로그래밍을 하며 알고리즘의 효율성, 뎁스를 줄이기 위한 고민을 했을 뿐 정확하게 빅오표기법으로 얼마다하며 팀장님을 설득한 적이 없다.</description>
    </item>
    
    <item>
      <title>Javascript Console 활용</title>
      <link>https://aidanbae.github.io/code/javascript/console/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/console/</guid>
      <description>Intro 자바스크립트를 쓰면서 웹어플리케이션을 만들다보면 Debug를 위해 console객체를 자주 사용하게됩니다. 간혹 잘못 사용해서 잘못된 정보를 본다면&amp;hellip; 삽질의 시작이죠
Why Console 객체의 주의해야할 점과 좋은 활용법을 터득해 즐거운 디버깅을 해봅시다.
 console.log 자바스크립트 개발자라면 너무 친숙한녀석이죠.
console.log(obj1 [, obj2, ..., objN]); console.log(msg [, subst1, ..., substN]);  보시는 것처럼 객체와 메세지 등 다양한 인자값을 출력하는데 사용합니다.
주의할점은 객체를 로깅할때입니다. 우선 string 변수를 로깅해봅시다.
var sangik = &amp;#34;상익아 뭐하니&amp;#34; console.log(sangik); // 상익아 뭐하니 sangik = &amp;#34;what are you doing?</description>
    </item>
    
    <item>
      <title>Javascript Array - reduce, findIndex, find</title>
      <link>https://aidanbae.github.io/code/javascript/array2/</link>
      <pubDate>Wed, 12 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array2/</guid>
      <description>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.
이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.
reduce 이 녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다. 집중해서 내껄로 만들어보죠.
reduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해 하나의 값으로 줄입니다. 누적 계산값이라는 단어가 포인트!
arr.reduce(callback[, initialValue]) 우선 파라미터부터 알아볼까요
 첫번째 인자 callback(accumulator, currentValue, currentIndex, array) 두번째 인자 initialValue // optional  콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - forEach, map, filter</title>
      <link>https://aidanbae.github.io/code/javascript/array1/</link>
      <pubDate>Tue, 11 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array1/</guid>
      <description>HTML5 게임들을 만들면서 가장 유용하고 자주 사용한 자료구조 배열입니다.
push` pop shift unshift`등의 기본 함수들을 사용해 손쉽게 데이터를 조작할 수 있습니다. 더 나아가 멋지게 배열들을 다룰 수 있는 중급 내장함수들을 만나보겠습니다.
 기본으로 제공되는 함수를 배움으로서 생산성이 향상됩니다.
자바스크립트는 Array객체를 제공합니다.
배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.
전역객체인 Array를 쉽게 다루기 위한 표준내장함수 들을 공부해봅시다.
 forEach 해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.
array.forEach(callback [, thisArg]) 첫번째 인자 callback(item, index, array) 두번째 인자 thisArg // 콜백함수 사용시 this로서 사용되는 값</description>
    </item>
    
  </channel>
</rss>