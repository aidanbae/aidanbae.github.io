<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>garbage collector on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/tags/garbage-collector/</link>
    <description>Recent content in garbage collector on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Apr 2019 09:31:27 +0900</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/tags/garbage-collector/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[dotGo 2019] golang gc 튜닝</title>
      <link>https://aidanbae.github.io/video/gogc/</link>
      <pubDate>Mon, 15 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/gogc/</guid>
      <description>페이스북을 기술정보를 얻는 용도로 사용하는데 평소 추종하던 홍혜종님이 공유해준 발표자료이다.
go tune your memory라는 이름으로 dotgo 2019에서 진행된 발표 (Go 1.12 기준으로 설명)
gc언어를 사용한다면, garbage collector가 호출되는 것에 대해 알 필요가있다. 왜냐하면 gc가 호출되는 순간, 해당 프로그램은 잠깐동안의 lack상태가 되기 때문이다. 찰나의 순간이지만 게임처럼 퍼포먼스가 중요한 클라이언트, 서버는 gc호출을 튜닝해야한다. 개발자는 그러므로 gc의 잦은 호출을 막을 수 있도록 크게 두가지 행위를 할 수 있다.
첫번째는 garbage 자체가 생기지 않도록 하는 것.</description>
    </item>
    
  </channel>
</rss>