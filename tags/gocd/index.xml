<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gocd on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/tags/gocd/</link>
    <description>Recent content in gocd on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Sep 2018 12:31:27 +0100</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/tags/gocd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DinD(docker in docker)와 DooD(docker out of docker)</title>
      <link>https://aidanbae.github.io/code/docker/dinddood/</link>
      <pubDate>Mon, 03 Sep 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/dinddood/</guid>
      <description>Docker의 Client-Server아키텍쳐 단순히 도커를 이용해 이미지를 만들고 띄우는 개발자라면 docker client와 docker daemon이 분리되어 있는 것을 인지하지 못할 수 있다. 반면 CI(Continuous Integration/ 지속적 통합)툴을 사용하며 agent를 세팅하는 DevOps쪽 개발자라면 docker관련 task를 수행하면서 이 사실을 쉽게 접하게된다.
그림처럼 docker시스템 유닛은 크게 3개로 분리되며, Client, Host(Daemon), Registry가 그것이다. 자세한 내용은 이전 포스트 Docker client와 Docker server를 참고.
대부분의 현대 CI 도구들(travis, circle, gocd, jenkins)등이 agent를 통해 docker관련 Task를 수행을 하기 때문에 docker daemon은 호스트머신에서 동작하면서 컨테이너로 동작하는 agent들이 docker-client역할을 하는 경우가 많다.</description>
    </item>
    
    <item>
      <title>Docker Debug 모드</title>
      <link>https://aidanbae.github.io/code/docker/docker-debug/</link>
      <pubDate>Thu, 09 Aug 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-debug/</guid>
      <description>Why Docker의 디버그모드를 활용해서 트러블슈팅을 빠르게 진행할 수 있다.
 Docker Debug Mode를 켜보자. 1. 데몬이 사용할 Configuration파일을 편집해야한다.
/etc/docker에 위치한 daemon.json파일 없다면 직접 만들어봅시다.
 /etc/docker/daemon.json on Linux C:\ProgramData\docker\config\daemon.json on Window  2. 아래 컨텐츠를 추가합니다
{ &amp;#34;debug&amp;#34;: true } ps. 만약 파일이 이미 존재했다면 debug 프로퍼티를 추가하고 true값을 적어줍니다.
3. HUP signal을 데몬에게 보내서 configuration을 다시 reload하도록 합니다.
리눅스에서는 다음 명령어를 사용합니다:
$ sudo kill -SIGHUP $(pidof dockerd)  윈도우에서는 도커를 재시작하세요.</description>
    </item>
    
    <item>
      <title>Docker client와 Docker server</title>
      <link>https://aidanbae.github.io/code/docker/docker-overview/</link>
      <pubDate>Thu, 09 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-overview/</guid>
      <description>Why GoCD에서 AWS ECR로 이미지 빌드, 푸시 pipeline을 구축하면서
Docker의 구조에 대해서 좀더 자세히 알게된 점을 정리한다.
아키텍쳐를 이해함으로서 도커 통신과 관련된 이슈를 좀더 정확하게 해결할 수 있다.
 Docker 공식문서는 자주보았는데 Docker Overview는 그냥 슭 훑고 지나갔었다. 한국어로 치면 개요(?) 정도 이겠다. 그 곳에 있는 핵심내용을 정리해본다.
Basic 로컬에서 Docker를 사용할때 우리는 아주 손쉽게 docker ps, docker images 등의 명령어를 쳤기때문에 Docker 엔진의 작동방식을 잘 모르고 지나가는 경우가 많다. 간단하게 살펴보자.</description>
    </item>
    
  </channel>
</rss>