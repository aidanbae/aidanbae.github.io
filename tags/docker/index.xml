<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/tags/docker/</link>
    <description>Recent content in docker on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 May 2019 09:31:27 +0900</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MSA &amp; kubernetes</title>
      <link>https://aidanbae.github.io/video/study/msa/</link>
      <pubDate>Sun, 19 May 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/study/msa/</guid>
      <description>2016년 12월 발표자료이긴한데
MSA에 대한 이해가 한번에 되는 발표영상이다.
요즘 MSA에 대해 물어보는 동생들이 있어서 바로 추천해주는 영상!
인상적이었던 부분 인상적이었던 부분은 MSA와 팀모델에 대해 설명하는 부분이다.
 컨웨이의 법칙
“소프트웨어의 구조는 그 소프트웨어를 만드는 팀의 구조와 일치한다.”
 &amp;lsquo;팀의 구조??&amp;rsquo; 조대협님 왈: 개발 설계 백날 잘해봐야 소용없음 제대로된 팀 구조를 만드는 것이 설계 그다음은 알아서 됨
정말 크게 와닿는다. 게임즈에서는 서버팀이 혼자였기때문에 설계를 모노리틱하게 설계한 것도 있음.
하지만 서버팀이 인원이 늘었을 때도 모노리틱한 구조로 1인1프로젝트가 굉장히 불편했던 것은 맞다.</description>
    </item>
    
    <item>
      <title>Docker Container 내부 소켓 상태 확인 - nsenter와 netstat</title>
      <link>https://aidanbae.github.io/code/docker/docker-netstat/</link>
      <pubDate>Tue, 30 Apr 2019 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-netstat/</guid>
      <description>도커로 서비스 개발을 하다보면 상태 확인을 위해 호스트 머신이 아닌 컨테이너에 접근해야하는 경우가 생긴다. 호스트 머신 한 대에 여러 docker 서비스가 떠있을 수 있기 때문이다. (내가 이용 중인 AWS(ECS)도 내가 띄운 서비스 이외에 로그수집기, executor등의 또다른 docker 컨테이너가 떠있다.) 그러므로 호스트 머신에서 netstat 명령어는 모든 도커 서비스의 소켓정보들을 보여주기때문에 특정 서비스에 대한 스코프기능이 지원되지 않는다.
도커를 조금 이용해본 개발자라면 쉽게 docker exec 명령어로 해당 컨테이너에 접근해 내부에서 소켓상태를 살펴보려할 것이다.</description>
    </item>
    
    <item>
      <title>DinD(docker in docker)와 DooD(docker out of docker)</title>
      <link>https://aidanbae.github.io/code/docker/dinddood/</link>
      <pubDate>Mon, 03 Sep 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/dinddood/</guid>
      <description>Docker의 Client-Server아키텍쳐 단순히 도커를 이용해 이미지를 만들고 띄우는 개발자라면 docker client와 docker daemon이 분리되어 있는 것을 인지하지 못할 수 있다. 반면 CI(Continuous Integration/ 지속적 통합)툴을 사용하며 agent를 세팅하는 DevOps쪽 개발자라면 docker관련 task를 수행하면서 이 사실을 쉽게 접하게된다.
그림처럼 docker시스템 유닛은 크게 3개로 분리되며, Client, Host(Daemon), Registry가 그것이다. 자세한 내용은 이전 포스트 Docker client와 Docker server를 참고.
대부분의 현대 CI 도구들(travis, circle, gocd, jenkins)등이 agent를 통해 docker관련 Task를 수행을 하기 때문에 docker daemon은 호스트머신에서 동작하면서 컨테이너로 동작하는 agent들이 docker-client역할을 하는 경우가 많다.</description>
    </item>
    
    <item>
      <title>Docker Debug 모드</title>
      <link>https://aidanbae.github.io/code/docker/docker-debug/</link>
      <pubDate>Thu, 09 Aug 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-debug/</guid>
      <description>Why Docker의 디버그모드를 활용해서 트러블슈팅을 빠르게 진행할 수 있다.
 Docker Debug Mode를 켜보자. 1. 데몬이 사용할 Configuration파일을 편집해야한다.
/etc/docker에 위치한 daemon.json파일 없다면 직접 만들어봅시다.
 /etc/docker/daemon.json on Linux C:\ProgramData\docker\config\daemon.json on Window  2. 아래 컨텐츠를 추가합니다
{ &amp;#34;debug&amp;#34;: true } ps. 만약 파일이 이미 존재했다면 debug 프로퍼티를 추가하고 true값을 적어줍니다.
3. HUP signal을 데몬에게 보내서 configuration을 다시 reload하도록 합니다.
리눅스에서는 다음 명령어를 사용합니다:
$ sudo kill -SIGHUP $(pidof dockerd)  윈도우에서는 도커를 재시작하세요.</description>
    </item>
    
    <item>
      <title>Docker client와 Docker server</title>
      <link>https://aidanbae.github.io/code/docker/docker-overview/</link>
      <pubDate>Thu, 09 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-overview/</guid>
      <description>Why GoCD에서 AWS ECR로 이미지 빌드, 푸시 pipeline을 구축하면서
Docker의 구조에 대해서 좀더 자세히 알게된 점을 정리한다.
아키텍쳐를 이해함으로서 도커 통신과 관련된 이슈를 좀더 정확하게 해결할 수 있다.
 Docker 공식문서는 자주보았는데 Docker Overview는 그냥 슭 훑고 지나갔었다. 한국어로 치면 개요(?) 정도 이겠다. 그 곳에 있는 핵심내용을 정리해본다.
Basic 로컬에서 Docker를 사용할때 우리는 아주 손쉽게 docker ps, docker images 등의 명령어를 쳤기때문에 Docker 엔진의 작동방식을 잘 모르고 지나가는 경우가 많다. 간단하게 살펴보자.</description>
    </item>
    
  </channel>
</rss>