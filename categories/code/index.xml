<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/categories/code/</link>
    <description>Recent content in Code on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 Jan 2020 09:31:27 +0100</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP 서버 구현과 패킷분석</title>
      <link>https://aidanbae.github.io/code/golang/tcp-server/</link>
      <pubDate>Sun, 19 Jan 2020 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/tcp-server/</guid>
      <description>신기술이 많이 쏟아지는 시대이다. 빠르게 배우는 것도 좋지만 협업을 위해서는 서로의 sync를 맞추기위한 agreement가 존재해야하고 많은 기술들이 tcp를 근간으로 발전했기 때문에 tcp에 대한 지식은 agreement로 중요한 역할을 할 수 있다.
요즘은 quic이라고해서 udp기반의 서비스도 새로운 활로를 트는듯하지만 여러분이 사용하는 대부분의 서비스는 신뢰성 프로토콜인 tcp위에서 동작한다. 가장 흔한 http도 대부분이 tcp위에서 사용된다.
tcp를 로우 머신기준으로 엄청깊게 연구하는&amp;hellip; sk_buff, 운영체제 이벤트큐 단위까지 까서 보는 이런글 (https://d2.naver.com/helloworld/47667) 보다 자세하진 않겠지만 내 나름의 방법으로 눈으로 확인해보는 시간을 가지고자한다.</description>
    </item>
    
    <item>
      <title>공유 메모리를 활용한 프로세스간 통신 with C</title>
      <link>https://aidanbae.github.io/code/core/shm/</link>
      <pubDate>Wed, 14 Aug 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/core/shm/</guid>
      <description>어쩌다보니 c 프로그래밍을 깊게 해야될 일이 생겼습니다. 대학교때 너무 재미없어서 이쪽은 절대 안한다고 했었는데&amp;hellip; 컴퓨터를 알아갈수록 로우한 프로그래밍 지식이 필요해지는 순간들이 자주 찾아오네요.
쓰레드간 통신이 아닌 멀티 프로세스 프로그래밍에서 프로세스간 통신을 위해 OS단에서 제공하는 ipc라는 녀석이 있습니다. 리눅스에서 제공하는 ipc(inter process communication)는 아래 3가지입니다.
 공유 메모리 (Shared Memory) 세마포어 (Semaphore) 메세지 큐 (Message Queue)  그 중 첫번째 공유메모리는 아직도 자주 활용되는 녀석입니다.
공유메모리는 단어 뜻에서 알 수 있듯이 하나의 프로세스에서가 아니라 여러 프로세스가 함께 사용하는 메모리를 말합니다.</description>
    </item>
    
    <item>
      <title>[dotGo 2019] golang gc 튜닝</title>
      <link>https://aidanbae.github.io/video/gogc/</link>
      <pubDate>Mon, 15 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/gogc/</guid>
      <description>페이스북을 기술정보를 얻는 용도로 사용하는데 평소 추종하던 홍혜종님이 공유해준 발표자료이다.
go tune your memory라는 이름으로 dotgo 2019에서 진행된 발표 (Go 1.12 기준으로 설명)
gc언어를 사용한다면, garbage collector가 호출되는 것에 대해 알 필요가있다. 왜냐하면 gc가 호출되는 순간, 해당 프로그램은 잠깐동안의 lack상태가 되기 때문이다. 찰나의 순간이지만 게임처럼 퍼포먼스가 중요한 클라이언트, 서버는 gc호출을 튜닝해야한다. 개발자는 그러므로 gc의 잦은 호출을 막을 수 있도록 크게 두가지 행위를 할 수 있다.
첫번째는 garbage 자체가 생기지 않도록 하는 것.</description>
    </item>
    
    <item>
      <title>Golang Fan-Out Fan-In 디자인</title>
      <link>https://aidanbae.github.io/code/golang-design/fan/</link>
      <pubDate>Wed, 16 Jan 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/fan/</guid>
      <description>회사일을 바쁘다보니 이것저것 신경쓸게 많아 정리해야지정리해야지 하고 너무 늦게 글을 쓰는 감이 없지 않네요. 이어서 해보도록 하겠습니다. 이전 시간에 Pipeline 패턴을 알아봤는데 이를 좀더 활용해 Fan out Fan in 패턴을 알아보고자합니다.
golang 멀티플렉싱 디자인패턴 중 하나인 Fan out Fan In은 큰 건물의 회전문을 생각하면서 이해하면 편합니다.
prerequisites  chan에 대한 이해를 토대로 pipe함수를 작성할 수 있다. Pipeline 디자인패턴을 숙지했다.   Basic Fan의 사전적 의미는 선풍기, 환풍기, 회전문 같은 것입니다. 회전문처럼 생각했습니다.</description>
    </item>
    
    <item>
      <title>함께 자라기 - 애자일로 가는 길</title>
      <link>https://aidanbae.github.io/article/book/grow/</link>
      <pubDate>Sun, 13 Jan 2019 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/grow/</guid>
      <description>입사 후 처음으로 책을 선물받았다.
선물을 준 동료(cody)는 퇴근길에 종종 나를 태워줬기때문에 개발 또는 인생에 대해 의견을 나눌 일이 많았는데 생각이 많이 달랐지만 서로 경청하고 자신의 의견을 확실히 이야기해주기에 즐거운 대화가 많았다. 어린왕자에 대해 이야기할 때 나에게 책선물을 주시겠다며 이 책을 소개해주었다.
 개발조직을 이끄는 리더라면 꼭 보았으면 한다.
좋은 영감을 준다.
책의 주요 주제별로 내생각을 정리해보았다.
중요하다고 생각하는 것이 중요하지 않다. 대다수의 조직에서 직원을 뽑는 데 중요하다고 생각하는 요소가 많은 경우 별로 중요하지 않고, 중요하지 않다고 생각하는 요소가 중요한 경우가 많음.</description>
    </item>
    
    <item>
      <title>golang과 자료구조 힙(heap)</title>
      <link>https://aidanbae.github.io/code/golang/heap/</link>
      <pubDate>Sat, 17 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/heap/</guid>
      <description>마크다운문서가 테마때문에 잘 적용되지 않아 수정할 예정입니다. 다음번 업데이트에 테마를 고칠예정이니 불편해도 양해부탁드려요
자료구조 힙 그래프의 트리 구조중 하나로 &amp;lsquo;우선순위 큐(priority queue)&amp;lsquo;를 구현할 때 사용됩니다. 우선순위 큐는 데이터 구조의 하나로서 데이터를 자유롭게 추가할 수 있습니다. 반면 데이터를 추출할 때는 최솟값부터 순서대로 선택됩니다. 추가는 자유롭게하고 추출할 때는 작은 값부터 꺼내는 것이 우선순위 큐입니다.
특징   힙을 표현하는 트리 구조에서는 각 정점을 &amp;lsquo;노드&#39;라고 부릅니다.
  자식 노드의 숫자는 반드시 부모의 숫자보다 커야한다는 규칙이 있습니다.</description>
    </item>
    
    <item>
      <title>Golang - EmptyStruct 빈구조체</title>
      <link>https://aidanbae.github.io/code/golang/emptystruct/</link>
      <pubDate>Thu, 18 Oct 2018 11:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/emptystruct/</guid>
      <description>done &amp;lt;- struct{}{} 고랭관련 깃을 돌아다니면서 훌륭한 레파지토리(Docker, Gin..)들을 내부를 구경하다보면
위처럼 빈 구조체를 채널에 던지는 경우를 종종 볼 수 있다.
struct{}{}
the empty struct
나는 이게 {}{} 이 리터럴 모양이 뭔가 지저분해보여서
간단한 종료 시그널을 보내는 채널은 대부분 bool, int 채널을 사용했었다.
bool 값보내는 거 보다 값이 적은가?..
나는 구조체라고 생각해서 더 크다고만 생각했는데
찾아보니 놀랍게도 struct{}{}는 사이즈가 0이다(기본기가 부족한 나만 놀란거일수도 있다;)
사이즈를 확인할 수 있는 내장 메소드가 있을까 찾아보니</description>
    </item>
    
    <item>
      <title>Golang Slice 슬라이스 응용</title>
      <link>https://aidanbae.github.io/code/golang/slice/</link>
      <pubDate>Sun, 14 Oct 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/slice/</guid>
      <description>이거보면된다.
https://github.com/golang/go/wiki/SliceTricks</description>
    </item>
    
    <item>
      <title>Golang 결제검증서버 구현 - Validator 디자인</title>
      <link>https://aidanbae.github.io/code/golang/validator/</link>
      <pubDate>Fri, 07 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/validator/</guid>
      <description>Intro 결제 와 관련된 정보는 고객 입장에서도 회사 입장에서도 매우 중요한 정보이다.
타사(구글, 페이스북, 샘성)의 결제모듈을 활용한다면 그 절차 사이사이의 검증과 기록은 결제검증서버가 해야할 필수적인 부분- 이번에 페이스북으로 글로벌 게임서버 런칭을 진행하면서 페이스북 결제를 활용해 돈방석에 앉아보기로 팀방향이 결정되었고(제발~)
우리 서버팀은 그 돈방석의 영수증 역할을 할 결제검증서버를 구현하게되었다.
이전에 불확실성을 줄이기위해 방명록을 간단하게 만들어보면서 orm프레임워크, mariadb 등을 확인했었고 그 연장선에서 이번 검증서버 프로젝트는 xorm과 web framework는 gin을 활용하기로 했다.
 Point 결제 쪽에 자신감이 넘치는 팀장님이 명확한 로직을 제시해주었기때문에 코딩은 어렵지 않았다.</description>
    </item>
    
    <item>
      <title>Golang Sort 정렬</title>
      <link>https://aidanbae.github.io/code/golang/sort/</link>
      <pubDate>Tue, 14 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/sort/</guid>
      <description>golang에서는 정렬 (sort) 라이브러리를 제공하고 있습니다.
다음은 내장 함수들을 활용한 예제코드입니다:
func main() { str := []string{&amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;} sort.Strings(str) fmt.Println(&amp;#34;Strings: &amp;#34;, str) ints := []int{70, 2, 4} sort.Ints(ints) fmt.Println(&amp;#34;Ints: &amp;#34;, ints) s := sort.IntsAreSorted(ints) fmt.Println(&amp;#34;Sorted: &amp;#34;, s) } 결과:
Strings: [a b c] Ints: [2 4 70] Sorted: true Process finished with exit code 0 sort.Sort() 정렬을 꼭 이런식으로 하고싶은게 아닐 수 있습니다. 커스터마이징을 할 수 있도록 sort는 Sort라는 메소드를 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Pipeline</title>
      <link>https://aidanbae.github.io/code/golang-design/pipeline/</link>
      <pubDate>Sun, 12 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/pipeline/</guid>
      <description>저번 시간에 채널 중심의 생각전환으로 하나의 작업 파이프를 만드는 방법을 배웠습니다.
이번엔 여러가지 작업 파이프들을 이어서 하나의 작업 파이프라인을 구축해봅시다.
혹시 이전 채널 중심 프로그래밍이라는 포스트를 놓치셨다면 보고오시길 추천드립니다.
Why 작업 파이프라인을 구축해서 고루틴과 채널 활용을 극대화합니다.
 What 어떤 작업 파이프라인을 구성해볼까요?
이해하기 쉬운 설명을 위해 쉬운 작업들 위주로 예제를 구성해보았습니다.
  0에서 99까지 랜덤한 수를 특정 횟수만큼 만들어내는 task    해당 랜덤한 수를 출력하는 task 숫자들을 제곱하는 task 마지막으로 그 제곱된 수들을 모두 더하는 task  총 4개의 작업이 있습니다.</description>
    </item>
    
    <item>
      <title>Golang 채널 중심 프로그래밍</title>
      <link>https://aidanbae.github.io/code/golang/fib/</link>
      <pubDate>Sat, 11 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/fib/</guid>
      <description>&amp;ldquo;사실 모든 학문은 연결되어있다. 사회학도 역사도 프로그래밍도&amp;rdquo;
Intro 사회학에서 산업혁명 하면 떠오르는 키워드는 Division of labour이다. 즉, 한국어로 분업이다. 일을 처리하는데 분업에 따른 전문성 증가, 기계와 같은 파이프라인 등은 우리 사회에 큰 영향을 미쳤다. 이전에 없던 엄청난 생산량(공장 시스템)에 사회는 급성장한다.
빠른 성장만큼 노동문제와 같은 각종 사회문제가 터져나왔고 그런 생산량이 전투력에 악용되어 제2차 세계대전에서는 수많은 인류의 죽음을 우린 목격해야했다.
프로그래밍에서도 cpu가 늘고 분업과 관련된 동시성 프로그래밍들이 발전하면서 lock기법이 발전했고 race condition, deadlock등 다양한 문제들이 속출했다.</description>
    </item>
    
    <item>
      <title>Golang과 websocket을 활용한 서버 프로그래밍 (장애 없는 서버 런칭 도전기)</title>
      <link>https://aidanbae.github.io/gallery/golang-meetup/</link>
      <pubDate>Mon, 30 Jul 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/gallery/golang-meetup/</guid>
      <description>Intro 2018, 7월 25일 제1회 golang meetup이 열렸다.
그간 golang korea 커뮤니티에서 눈팅으로 이득을 취한 나&amp;hellip; 장애없이 런칭한 Golang 스낵게임서버를 개발할 때에도 수많은 golang 블로그에서 도움을 받았기때문에 이번 meetup에서 그분들을 만나뵙고 이야기를 나눌 수 있으면 좋겠다 생각해서 참가를 신청했다. 발표자가 없어 존폐위기까지 거론하셔서 발표를 하는 방향으로 결정
작은 토즈방에서 20명정도 모여서 소근소근 토론하는 자리가 될줄 알았는데 160명이나!!
개발인생 첫 발표인데 많은 사람이 와주셔서 감사한 마음으로 준비했다.
GopherCon Talks Golang Korea에서 주최하는 밋업, 세미나 및 컨퍼런스의 발표 자료들을 모아두는 저장소이다.</description>
    </item>
    
    <item>
      <title>Javascript Console 활용</title>
      <link>https://aidanbae.github.io/code/javascript/console/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/console/</guid>
      <description>Intro 자바스크립트를 쓰면서 웹어플리케이션을 만들다보면 Debug를 위해 console객체를 자주 사용하게됩니다. 간혹 잘못 사용해서 잘못된 정보를 본다면&amp;hellip; 삽질의 시작이죠
Why Console 객체의 주의해야할 점과 좋은 활용법을 터득해 즐거운 디버깅을 해봅시다.
 console.log 자바스크립트 개발자라면 너무 친숙한녀석이죠.
console.log(obj1 [, obj2, ..., objN]); console.log(msg [, subst1, ..., substN]);  보시는 것처럼 객체와 메세지 등 다양한 인자값을 출력하는데 사용합니다.
주의할점은 객체를 로깅할때입니다. 우선 string 변수를 로깅해봅시다.
var sangik = &amp;#34;상익아 뭐하니&amp;#34; console.log(sangik); // 상익아 뭐하니 sangik = &amp;#34;what are you doing?</description>
    </item>
    
    <item>
      <title>Python 연산자 오버로딩을 활용하기</title>
      <link>https://aidanbae.github.io/code/python/pythonspecialmethod/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/python/pythonspecialmethod/</guid>
      <description>Intro Top of Tower GameServer(이하 tot)를 Python + Django 스택으로 구현하면서
가을과 겨울 사이에 Mason과 같이 공부한 Fluent Python을 프로젝트에 녹여볼려고 했다.
파이썬을 파볼 생각이라면 강력 추천
Mason과 Fluent Python(전문가를 위한 파이썬) 스터디를 진행하면서 Chapter13에서 연산자 오버로딩을 만났다. 사실 우리는 연산자를 숫자연산에만 사용하는 경향이 있다. 연산자는 논리표현 중 하나고 우리는 논리 표현으로서 더 새롭게 정의할 수 있다. 행렬의 곱이 숫자의 곱과 방식이 조금 다르듯, 게임 캐릭터에 써보는게 좋겠다는 이야기가 나왔다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Bridge</title>
      <link>https://aidanbae.github.io/code/golang-design/bridge/</link>
      <pubDate>Fri, 03 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/bridge/</guid>
      <description>브릿지 패턴 Bridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.
두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.
제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데 이해가 더 어렵다고 생각해 좋은 예제를 찾다가
게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바) http://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4
여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다.
위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다. 의존관계는 이 인터페이스들 간에만 존재합니다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Command</title>
      <link>https://aidanbae.github.io/code/golang-design/command/</link>
      <pubDate>Wed, 01 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/command/</guid>
      <description>그림판이나 Photoshop을 사용해본 경험이 있다면!
Ctrl+z키라는 마법의 주문 으로 우리는 우리가 했던 액션들을 취소해본 경험 유! 요구사항에 대한 캡슐화와
요구사항을 큐에 저장하거나 기록,취소 할수 있다는 장점!
  명령패턴 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴 그땐 왜이렇게 어렵게 느껴졌었는지..
 유저의 요청사항(명령) 캡슐화! 요청사항과 큐를 이용해서 작업내역을 관리!  그냥 가볍게 위 두가지만 생각하면 편하다. 우선 Command Interface를 구현해보자. 스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없다. 실수가 많은 나는 Ctrl+z의 광팬, 도전해보자.</description>
    </item>
    
    <item>
      <title>쉘 스크립트(shell script) - read, echo_back</title>
      <link>https://aidanbae.github.io/code/shell/bash1/</link>
      <pubDate>Mon, 11 Sep 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/shell/bash1/</guid>
      <description>유닉스 리눅스 쉘스크립트 공부 서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는
생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해
진다는 것은 팩트. 레츠 Do
https://opentutorials.org/course/2598/14204 생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움
echo $0 // 결과: -bash 터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다. Bash도 일종의 프로그램입니다. 우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - reduce, findIndex, find</title>
      <link>https://aidanbae.github.io/code/javascript/array2/</link>
      <pubDate>Wed, 12 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array2/</guid>
      <description>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.
이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.
reduce 이 녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다. 집중해서 내껄로 만들어보죠.
reduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해 하나의 값으로 줄입니다. 누적 계산값이라는 단어가 포인트!
arr.reduce(callback[, initialValue]) 우선 파라미터부터 알아볼까요
 첫번째 인자 callback(accumulator, currentValue, currentIndex, array) 두번째 인자 initialValue // optional  콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - forEach, map, filter</title>
      <link>https://aidanbae.github.io/code/javascript/array1/</link>
      <pubDate>Tue, 11 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array1/</guid>
      <description>HTML5 게임들을 만들면서 가장 유용하고 자주 사용한 자료구조 배열입니다.
push` pop shift unshift`등의 기본 함수들을 사용해 손쉽게 데이터를 조작할 수 있습니다. 더 나아가 멋지게 배열들을 다룰 수 있는 중급 내장함수들을 만나보겠습니다.
 기본으로 제공되는 함수를 배움으로서 생산성이 향상됩니다.
자바스크립트는 Array객체를 제공합니다.
배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.
전역객체인 Array를 쉽게 다루기 위한 표준내장함수 들을 공부해봅시다.
 forEach 해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.
array.forEach(callback [, thisArg]) 첫번째 인자 callback(item, index, array) 두번째 인자 thisArg // 콜백함수 사용시 this로서 사용되는 값</description>
    </item>
    
  </channel>
</rss>