<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codes on 아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/code/</link>
    <description>Recent content in Codes on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Apr 2020 09:31:27 +0900</lastBuildDate>
    
	<atom:link href="https://aidanbae.github.io/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bazel 빌드</title>
      <link>https://aidanbae.github.io/code/devops/bazel/</link>
      <pubDate>Thu, 16 Apr 2020 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/bazel/</guid>
      <description>bazel은 구글에서 오픈소스로 내놓은 빌드툴이다.
이전에 golang 밋업발표 때 함께 발표했던 카카오 모빌리티의 데이터랩장 승일님이 bazel for go를 발표했었는데 그때 당시에는 뭐 저런 것도 있구나 정도로 이해하고 넘어갔었고 내가 쓸일은 없을 거라고 생각했다. (vendor를 쓰다가 골치아팟던 적이 있지 않았고 go는 빌드 자체가 원래 빠르기 때문에 나처럼 작은 프로젝트는 bazel까지 갈 일이 없었다.)
(https://github.com/golangkorea/gophercon-talks)발표자료가 모여있는 사이트
근데 상황이 바뀌었다. 증권IT에 들어오게되면서 빌드구조가 복잡하고 디펜던시가 흉악한(?) 증권 C코드를 보면서 다시 한번 찾아보게되었다. c쪽에서 사용하는 makefile 문법은 그 태생 자체가 원래 지저분하고 공부하지 않으면 절대 유추할 수 없는 기호들 (@, , ?</description>
    </item>
    
    <item>
      <title>TCP 서버 구현과 패킷분석</title>
      <link>https://aidanbae.github.io/code/golang/tcp-server/</link>
      <pubDate>Sun, 19 Jan 2020 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/tcp-server/</guid>
      <description>신기술이 많이 쏟아지는 시대이다. 빠르게 배우는 것도 좋지만 협업을 위해서는 서로의 sync를 맞추기위한 agreement가 존재해야하고 많은 기술들이 tcp를 근간으로 발전했기 때문에 tcp에 대한 지식은 agreement로 중요한 역할을 할 수 있다.
요즘은 quic이라고해서 udp기반의 서비스도 새로운 활로를 트는듯하지만 여러분이 사용하는 대부분의 서비스는 신뢰성 프로토콜인 tcp위에서 동작한다. 가장 흔한 http도 대부분이 tcp위에서 사용된다.
tcp를 로우 머신기준으로 엄청깊게 연구하는&amp;hellip; sk_buff, 운영체제 이벤트큐 단위까지 까서 보는 이런글 (https://d2.naver.com/helloworld/47667) 보다 자세하진 않겠지만 내 나름의 방법으로 눈으로 확인해보는 시간을 가지고자한다.</description>
    </item>
    
    <item>
      <title>envoy와 x-forwarded-proto 헤더 이슈</title>
      <link>https://aidanbae.github.io/code/devops/k8s/header/</link>
      <pubDate>Thu, 05 Dec 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/k8s/header/</guid>
      <description>게임서버를 할땐 x-forwarded 헤더에 대해 깊게 다룰일이 없었는데 프론트단부터 거치는 프록시 서버들이 많은 시스템을 운영하다보니 접속 클라이언트의 정보가 담긴 x-forwarded 헤더를 공부할 기회가 생겼다.
x-로 시작하는 헤더는 사용자가 임의로 정의한 헤더를 나타냅니다. 근데 nginx등 오픈소스들이 워낙 많이 쓰이다보니 사실상 표준이 된 케이스가 x-forwarded-* 시리즈임.
x-forwarded-for, x-forwarded-proto, x-forwarded-host 위 삼총사는 de-facto standard 헤더로 사실상 표준이 되어버린 헤더임. 이 삼총사는 한세트 묶음으로 보통 전달되며 클라우드 업계에서도 표준으로 자리잡고있음. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded
예를들면 아래처럼 사용될 수 있습니다.</description>
    </item>
    
    <item>
      <title>istio debug를 위한 controlZ 활용</title>
      <link>https://aidanbae.github.io/code/devops/k8s/istio-mixer-debug/</link>
      <pubDate>Sat, 30 Nov 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/k8s/istio-mixer-debug/</guid>
      <description>istio의 mixer는 서비스에 대한 원격 분석등의 수집을 도와주는 유연한 모델이다. 서비스 옆에 붙어 있는 istio-proxy들의 수집되는 정보들을 mixer를 통해 파이프라이닝 할 수 있다.
그림처럼 adapter api를 사용하기 때문에 다양한 어댑터를 사용해 확장성과 유연성을 다 갖춘 모델이다.
istio 믹서에 문제가 생긴다면 서비스에 대한 수집 정보들에 영향이 생길 수 있다. 그러므로 특정 서비스에 라우팅이 안되고 모니터링상 이슈가 없었다면 로그나 수집 데이터를 생성, 운반하는 믹서에 이슈가 있는지 확인해보아야한다.
istio는 쿠버네티스 대시보드처럼 손쉽게 istio의 현재 상태와 스코프 기능을 제공하는 controlZ라는 서비스를 제공하고있다.</description>
    </item>
    
    <item>
      <title>공유 메모리를 활용한 프로세스간 통신 with C</title>
      <link>https://aidanbae.github.io/code/core/shm/</link>
      <pubDate>Wed, 14 Aug 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/core/shm/</guid>
      <description>어쩌다보니 c 프로그래밍을 깊게 해야될 일이 생겼습니다. 대학교때 너무 재미없어서 이쪽은 절대 안한다고 했었는데&amp;hellip; 컴퓨터를 알아갈수록 로우한 프로그래밍 지식이 필요해지는 순간들이 자주 찾아오네요.
쓰레드간 통신이 아닌 멀티 프로세스 프로그래밍에서 프로세스간 통신을 위해 OS단에서 제공하는 ipc라는 녀석이 있습니다. 리눅스에서 제공하는 ipc(inter process communication)는 아래 3가지입니다.
 공유 메모리 (Shared Memory) 세마포어 (Semaphore) 메세지 큐 (Message Queue)  그 중 첫번째 공유메모리는 아직도 자주 활용되는 녀석입니다.
공유메모리는 단어 뜻에서 알 수 있듯이 하나의 프로세스에서가 아니라 여러 프로세스가 함께 사용하는 메모리를 말합니다.</description>
    </item>
    
    <item>
      <title>쿠버네티스 느낌가져가기 1 - minikube</title>
      <link>https://aidanbae.github.io/code/devops/k8s/start/</link>
      <pubDate>Wed, 01 May 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/k8s/start/</guid>
      <description>쿠버네티스 개발환경을 구성하는 동기 퇴사 직전에 최대 관심사는 kubernetes였다. 카카오가 더이상 자회사에게 DKOS(메소스 마라톤) 서비스를 제공하지 않음에 따라 DKOS에 있는 개발환경을 어디론가 옮겨야하는 이슈에 직면했다. 인프라팀장님한테 물리서버 혹은 VM을 받아서 개발환경을 구축할 수 있다는 소식에 설레는 마음으로 쿠버네티스 책을 구매하고 이것저것 공부했지만 이것저것 딜레이가 되면서 퇴사때까지 해보지못한게 작은 한이 되었다. 메소스마라톤 환경을 직접 구성해보지 않았기 때문에 적당히 문제 없을 수준으로 공부하고 사용했었다. 그래서 부사수가 왔음에도 정확한 설명을 하지 못해 스스로에 대해 부족함과 아쉬움을 느꼈다.</description>
    </item>
    
    <item>
      <title>Docker Container 내부 소켓 상태 확인 - nsenter와 netstat</title>
      <link>https://aidanbae.github.io/code/docker/docker-netstat/</link>
      <pubDate>Tue, 30 Apr 2019 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-netstat/</guid>
      <description>도커로 서비스 개발을 하다보면 상태 확인을 위해 호스트 머신이 아닌 컨테이너에 접근해야하는 경우가 생긴다. 호스트 머신 한 대에 여러 docker 서비스가 떠있을 수 있기 때문이다. (내가 이용 중인 AWS(ECS)도 내가 띄운 서비스 이외에 로그수집기, executor등의 또다른 docker 컨테이너가 떠있다.) 그러므로 호스트 머신에서 netstat 명령어는 모든 도커 서비스의 소켓정보들을 보여주기때문에 특정 서비스에 대한 스코프기능이 지원되지 않는다.
도커를 조금 이용해본 개발자라면 쉽게 docker exec 명령어로 해당 컨테이너에 접근해 내부에서 소켓상태를 살펴보려할 것이다.</description>
    </item>
    
    <item>
      <title>CPU 캐시 이해하기</title>
      <link>https://aidanbae.github.io/code/devops/computer/cpucache/</link>
      <pubDate>Mon, 22 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/computer/cpucache/</guid>
      <description>CPU 캐시란? 컴퓨터 시스템의 성능을 향상 시키기 위해 주로 CPU칩 안에 포함되는 빠르고 작은 매우 비싼 메모리입니다. 프로그램에서 직접적으로 읽거나 쓸 수 없고 하드웨어의 메모리 관리 시스템이 내부적으로 제어합니다. 대부분의 프로그램은 한번 사용할 데이터를 다시 사용할 가능성이 높고, 그 주변의 데이터도 곧 사용할 가능성이 높은 데이터 지역성을 가지고 있다. 데이터 지역성을 활용하여 메인 메모리에 있는 데이터를 캐시 메모리에 불러와 두고, cpu가 필요한 데이터를 캐시에서 먼저 찾도록 하면 향상시킬수 있다.
여기서 포인트는 데이터의 지역성을 활용한다!</description>
    </item>
    
    <item>
      <title>tcmalloc</title>
      <link>https://aidanbae.github.io/code/devops/computer/tcmalloc/</link>
      <pubDate>Tue, 16 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/computer/tcmalloc/</guid>
      <description>go tune memory 발표자료를 보면서 구경한 파생 지식 tcmalloc
구글 공식 문서 http://goog-perftools.sourceforge.net/doc/tcmalloc.html
구글에서 만든 TCMalloc
보통 멀티 스레드 환경의 서버를 만들다보면 메모리 풀을 사용하게 된다.
메모리 풀의 이점:
 빠른메모리할당 메모리 단편화 감소  하나의 거대한 메모리 풀을 사용하면 단순하게 malloc을 호출해서 메모리를 할당하는 것 보다 속도가 빠르다. 메모리 풀에 따라 다르겠지만 일반적으로 볼ㄸ ㅐ 처음 프로그래밍이 실행될 때 필요한 메모리를 통째로 잡아놓고 메모리가 필요한 경우에는 잡아놓은메모리 안에서 잘라서 주기 때문입니다.</description>
    </item>
    
    <item>
      <title>구글 코드잼 2019 QR 도전!</title>
      <link>https://aidanbae.github.io/code/golang/googlecodejam2019/</link>
      <pubDate>Tue, 09 Apr 2019 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/googlecodejam2019/</guid>
      <description>20대의 마지막으로 기본기를 탄탄히하자는 생각으로 알고리즘 공부를 진행해 왔다. 목표가 있으면 동기부여에 좋기때문에 구글코드잼을 도전해보았다.
올해 4월 7일에 진행된 Qualification Round는 다음 라운드로 통과할 수 있는 자격을 주는 테스트이다. 문제는 어렵지 않다. bfs, dfs, dp 등 문제만 읽어도 케이스가 좀 나뉘는 한국의 정형화된 코딩테스트에 비해 창의력이 필요한 문제가 좀더 많았다. 문제 하나당 3개의 테스트 케이스가 존재한다. normal case는 보통 자료의 크기가 적어 정확성 테스트가 진행돠며 통과할경우 6point를 얻게된다. hard case는 좀더 데이터 input의 크기가 크며 효율성을 증명하는 테스트이다 통과할경우 10point를 얻게된다.</description>
    </item>
    
    <item>
      <title>Golang Fan-Out Fan-In 디자인</title>
      <link>https://aidanbae.github.io/code/golang-design/fan/</link>
      <pubDate>Wed, 16 Jan 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/fan/</guid>
      <description>회사일을 바쁘다보니 이것저것 신경쓸게 많아 정리해야지정리해야지 하고 너무 늦게 글을 쓰는 감이 없지 않네요. 이어서 해보도록 하겠습니다. 이전 시간에 Pipeline 패턴을 알아봤는데 이를 좀더 활용해 Fan out Fan in 패턴을 알아보고자합니다.
golang 멀티플렉싱 디자인패턴 중 하나인 Fan out Fan In은 큰 건물의 회전문을 생각하면서 이해하면 편합니다.
prerequisites  chan에 대한 이해를 토대로 pipe함수를 작성할 수 있다. Pipeline 디자인패턴을 숙지했다.   Basic Fan의 사전적 의미는 선풍기, 환풍기, 회전문 같은 것입니다. 회전문처럼 생각했습니다.</description>
    </item>
    
    <item>
      <title>Go Modules 시작하기</title>
      <link>https://aidanbae.github.io/code/golang/modules/</link>
      <pubDate>Thu, 20 Dec 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/modules/</guid>
      <description>Go modules 시작하기 golang version 1.11버전부터 획기적인 변화가 생겼습니다. 버전관리 프로젝트(vgo)를 Russ Cox의 메인오더로 go modules가 추가되었습니다.
go modules는 vgo, dep, glide등으로 파생되었던 버전관리의 표준을 이야기하며 gopath의 종말을 외쳤습니다. 즉, 패키지간 종속성 관리를 golang team이 표준화하여 관리하는 정책입니다.
개발환경
 IDE : intellij IDEA version: golang 1.11.4 os : darwin(mac os)  Golang으로된 프로젝트를 동시에 여러개 진행(페이스북 웹훅 클러스터)하면서 불편했던 것 중 하나가 GOPATH설정 바꾸기였다. 내가 사용하던 intellij IDEA는 GOPATH를 기준으로 인덱싱을 했었기때문에 작업 프로젝트가 설정에 추가된 GOPATH가 아니라면 다시 GOPATH를 수정하고 프로젝트를 켜야했다.</description>
    </item>
    
    <item>
      <title>nGrinder agent가 controller에 못붙는 현상</title>
      <link>https://aidanbae.github.io/code/devops/ngrinder/agentcontroller/</link>
      <pubDate>Mon, 19 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/ngrinder/agentcontroller/</guid>
      <description>마크다운문서가 테마때문에 잘 적용되지 않아 수정할 예정입니다. 다음번 업데이트에 테마를 고칠예정이니 불편해도 양해부탁드려요
nGrinder agent가 controller에 못붙는 현상 환경 IDC에서 AWS로 옮겨오면서 테스트환경을 구축하기위해 n-grinder EC2 인스턴스 이미지를 떠 놨습니다.
참고
n-grinder는 마스터-슬레이브처럼 controller와 agent로 구성됩니다. controller는 하나의 머리 역할을 하는 곳으로 task와 스크립트 관리, 테스트 결과를 수집해 통계자료로 보여주며 웹 인터페이스를 제공한다. agent는 cotroller의 명령을 받아 수행합니다. agent는 유저가 요청한 task정보에 따라 부하를 발생시켜 프로세스와 쓰레드를 관리하고 대상 시스템의 CPU와 메모리를 모니터링합니다.</description>
    </item>
    
    <item>
      <title>golang과 자료구조 힙(heap)</title>
      <link>https://aidanbae.github.io/code/golang/heap/</link>
      <pubDate>Sat, 17 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/heap/</guid>
      <description>마크다운문서가 테마때문에 잘 적용되지 않아 수정할 예정입니다. 다음번 업데이트에 테마를 고칠예정이니 불편해도 양해부탁드려요
자료구조 힙 그래프의 트리 구조중 하나로 &amp;lsquo;우선순위 큐(priority queue)&amp;lsquo;를 구현할 때 사용됩니다. 우선순위 큐는 데이터 구조의 하나로서 데이터를 자유롭게 추가할 수 있습니다. 반면 데이터를 추출할 때는 최솟값부터 순서대로 선택됩니다. 추가는 자유롭게하고 추출할 때는 작은 값부터 꺼내는 것이 우선순위 큐입니다.
특징   힙을 표현하는 트리 구조에서는 각 정점을 &amp;lsquo;노드&#39;라고 부릅니다.
  자식 노드의 숫자는 반드시 부모의 숫자보다 커야한다는 규칙이 있습니다.</description>
    </item>
    
    <item>
      <title>Golang - EmptyStruct 빈구조체</title>
      <link>https://aidanbae.github.io/code/golang/emptystruct/</link>
      <pubDate>Thu, 18 Oct 2018 11:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/emptystruct/</guid>
      <description>done &amp;lt;- struct{}{} 고랭관련 깃을 돌아다니면서 훌륭한 레파지토리(Docker, Gin..)들을 내부를 구경하다보면
위처럼 빈 구조체를 채널에 던지는 경우를 종종 볼 수 있다.
struct{}{}
the empty struct
나는 이게 {}{} 이 리터럴 모양이 뭔가 지저분해보여서
간단한 종료 시그널을 보내는 채널은 대부분 bool, int 채널을 사용했었다.
bool 값보내는 거 보다 값이 적은가?..
나는 구조체라고 생각해서 더 크다고만 생각했는데
찾아보니 놀랍게도 struct{}{}는 사이즈가 0이다(기본기가 부족한 나만 놀란거일수도 있다;)
사이즈를 확인할 수 있는 내장 메소드가 있을까 찾아보니</description>
    </item>
    
    <item>
      <title>Golang Slice 슬라이스 응용</title>
      <link>https://aidanbae.github.io/code/golang/slice/</link>
      <pubDate>Sun, 14 Oct 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/slice/</guid>
      <description>이거보면된다.
https://github.com/golang/go/wiki/SliceTricks</description>
    </item>
    
    <item>
      <title>빅오 표기법(Big O notation)과 자바스크립트</title>
      <link>https://aidanbae.github.io/code/algorithm/bigo/</link>
      <pubDate>Thu, 20 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/algorithm/bigo/</guid>
      <description>오늘은 컴퓨터과학의 꽃, 알고리즘의 인트로에 늘 나오는 빅오표기법에 대해서 이야기해보고자한다! +_ +
대학생 때, 삼성SCSS 덕분에 컴퓨터과학을 늦게 접하면서 시립대에서 김진석 교수님 알고리즘 수업을 야간에 들었었는데 컴퓨터과학 전공자와 비전공자를 나누는 기준이 알고리즘이며 알고리즘의 효율성을 판별하는 빅오표기법은 매우 중요해요라고 콕 찦어 말하신게 기억에 남는다.
스타트업에 있을 때는 되게하는데 바빠 빅오표기법을 고민한 적이 없었고, 현업에 들어와서 게임프로그래밍을 하며 알고리즘의 효율성, 뎁스를 줄이기 위한 고민을 했을 뿐 정확하게 빅오표기법으로 얼마다하며 팀장님을 설득한 적이 없다.</description>
    </item>
    
    <item>
      <title>Golang 결제검증서버 구현 - Validator 디자인</title>
      <link>https://aidanbae.github.io/code/golang/validator/</link>
      <pubDate>Fri, 07 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/validator/</guid>
      <description>Intro 결제 와 관련된 정보는 고객 입장에서도 회사 입장에서도 매우 중요한 정보이다.
타사(구글, 페이스북, 샘성)의 결제모듈을 활용한다면 그 절차 사이사이의 검증과 기록은 결제검증서버가 해야할 필수적인 부분- 이번에 페이스북으로 글로벌 게임서버 런칭을 진행하면서 페이스북 결제를 활용해 돈방석에 앉아보기로 팀방향이 결정되었고(제발~)
우리 서버팀은 그 돈방석의 영수증 역할을 할 결제검증서버를 구현하게되었다.
이전에 불확실성을 줄이기위해 방명록을 간단하게 만들어보면서 orm프레임워크, mariadb 등을 확인했었고 그 연장선에서 이번 검증서버 프로젝트는 xorm과 web framework는 gin을 활용하기로 했다.
 Point 결제 쪽에 자신감이 넘치는 팀장님이 명확한 로직을 제시해주었기때문에 코딩은 어렵지 않았다.</description>
    </item>
    
    <item>
      <title>DinD(docker in docker)와 DooD(docker out of docker)</title>
      <link>https://aidanbae.github.io/code/docker/dinddood/</link>
      <pubDate>Mon, 03 Sep 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/dinddood/</guid>
      <description>Docker의 Client-Server아키텍쳐 단순히 도커를 이용해 이미지를 만들고 띄우는 개발자라면 docker client와 docker daemon이 분리되어 있는 것을 인지하지 못할 수 있다. 반면 CI(Continuous Integration/ 지속적 통합)툴을 사용하며 agent를 세팅하는 DevOps쪽 개발자라면 docker관련 task를 수행하면서 이 사실을 쉽게 접하게된다.
그림처럼 docker시스템 유닛은 크게 3개로 분리되며, Client, Host(Daemon), Registry가 그것이다. 자세한 내용은 이전 포스트 Docker client와 Docker server를 참고.
대부분의 현대 CI 도구들(travis, circle, gocd, jenkins)등이 agent를 통해 docker관련 Task를 수행을 하기 때문에 docker daemon은 호스트머신에서 동작하면서 컨테이너로 동작하는 agent들이 docker-client역할을 하는 경우가 많다.</description>
    </item>
    
    <item>
      <title>Golang 동시성을 활용한 알고리즘 문제풀이 - 1</title>
      <link>https://aidanbae.github.io/code/golang/googlecodejam2016/</link>
      <pubDate>Mon, 20 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/googlecodejam2016/</guid>
      <description>파이프라인 패턴을 활용해서 알고리즘을 풀어보기로 했다.
알고리즘 문제: Google Code Jam 2016 qualification round A
궁금했던 점 동시성 프로그래밍으로 기존 알고리즘 모범답안보다 얼마나 퍼포먼스를 낼 수 있을까
많은 프로그래밍대회가 싱글쓰레드기반으로 동작해 정답이 순차적으로 나와야한다. 하지만 멀티쓰레드 프로그래밍은 Case #1번이 아니라 Case #5번이 먼저 풀릴 수 있다.
 (사실 구글 코드잼의 가장 큰 난적은 문제가 영어라는 점이다)
문제요약 Bleatrix Trotter 이라는 여자분은 불면증에 걸린거 같다.
이 여자분은 잠에 골아떨어지기위해 특별한 전략이 있다.</description>
    </item>
    
    <item>
      <title>Golang Sort 정렬</title>
      <link>https://aidanbae.github.io/code/golang/sort/</link>
      <pubDate>Tue, 14 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/sort/</guid>
      <description>golang에서는 정렬 (sort) 라이브러리를 제공하고 있습니다.
다음은 내장 함수들을 활용한 예제코드입니다:
func main() { str := []string{&amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;} sort.Strings(str) fmt.Println(&amp;#34;Strings: &amp;#34;, str) ints := []int{70, 2, 4} sort.Ints(ints) fmt.Println(&amp;#34;Ints: &amp;#34;, ints) s := sort.IntsAreSorted(ints) fmt.Println(&amp;#34;Sorted: &amp;#34;, s) } 결과:
Strings: [a b c] Ints: [2 4 70] Sorted: true Process finished with exit code 0 sort.Sort() 정렬을 꼭 이런식으로 하고싶은게 아닐 수 있습니다. 커스터마이징을 할 수 있도록 sort는 Sort라는 메소드를 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Pipeline</title>
      <link>https://aidanbae.github.io/code/golang-design/pipeline/</link>
      <pubDate>Sun, 12 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/pipeline/</guid>
      <description>저번 시간에 채널 중심의 생각전환으로 하나의 작업 파이프를 만드는 방법을 배웠습니다.
이번엔 여러가지 작업 파이프들을 이어서 하나의 작업 파이프라인을 구축해봅시다.
혹시 이전 채널 중심 프로그래밍이라는 포스트를 놓치셨다면 보고오시길 추천드립니다.
Why 작업 파이프라인을 구축해서 고루틴과 채널 활용을 극대화합니다.
 What 어떤 작업 파이프라인을 구성해볼까요?
이해하기 쉬운 설명을 위해 쉬운 작업들 위주로 예제를 구성해보았습니다.
  0에서 99까지 랜덤한 수를 특정 횟수만큼 만들어내는 task    해당 랜덤한 수를 출력하는 task 숫자들을 제곱하는 task 마지막으로 그 제곱된 수들을 모두 더하는 task  총 4개의 작업이 있습니다.</description>
    </item>
    
    <item>
      <title>Golang 채널 중심 프로그래밍</title>
      <link>https://aidanbae.github.io/code/golang/fib/</link>
      <pubDate>Sat, 11 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/fib/</guid>
      <description>&amp;ldquo;사실 모든 학문은 연결되어있다. 사회학도 역사도 프로그래밍도&amp;rdquo;
Intro 사회학에서 산업혁명 하면 떠오르는 키워드는 Division of labour이다. 즉, 한국어로 분업이다. 일을 처리하는데 분업에 따른 전문성 증가, 기계와 같은 파이프라인 등은 우리 사회에 큰 영향을 미쳤다. 이전에 없던 엄청난 생산량(공장 시스템)에 사회는 급성장한다.
빠른 성장만큼 노동문제와 같은 각종 사회문제가 터져나왔고 그런 생산량이 전투력에 악용되어 제2차 세계대전에서는 수많은 인류의 죽음을 우린 목격해야했다.
프로그래밍에서도 cpu가 늘고 분업과 관련된 동시성 프로그래밍들이 발전하면서 lock기법이 발전했고 race condition, deadlock등 다양한 문제들이 속출했다.</description>
    </item>
    
    <item>
      <title>Docker Debug 모드</title>
      <link>https://aidanbae.github.io/code/docker/docker-debug/</link>
      <pubDate>Thu, 09 Aug 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-debug/</guid>
      <description>Why Docker의 디버그모드를 활용해서 트러블슈팅을 빠르게 진행할 수 있다.
 Docker Debug Mode를 켜보자. 1. 데몬이 사용할 Configuration파일을 편집해야한다.
/etc/docker에 위치한 daemon.json파일 없다면 직접 만들어봅시다.
 /etc/docker/daemon.json on Linux C:\ProgramData\docker\config\daemon.json on Window  2. 아래 컨텐츠를 추가합니다
{ &amp;#34;debug&amp;#34;: true } ps. 만약 파일이 이미 존재했다면 debug 프로퍼티를 추가하고 true값을 적어줍니다.
3. HUP signal을 데몬에게 보내서 configuration을 다시 reload하도록 합니다.
리눅스에서는 다음 명령어를 사용합니다:
$ sudo kill -SIGHUP $(pidof dockerd)  윈도우에서는 도커를 재시작하세요.</description>
    </item>
    
    <item>
      <title>Docker client와 Docker server</title>
      <link>https://aidanbae.github.io/code/docker/docker-overview/</link>
      <pubDate>Thu, 09 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-overview/</guid>
      <description>Why GoCD에서 AWS ECR로 이미지 빌드, 푸시 pipeline을 구축하면서
Docker의 구조에 대해서 좀더 자세히 알게된 점을 정리한다.
아키텍쳐를 이해함으로서 도커 통신과 관련된 이슈를 좀더 정확하게 해결할 수 있다.
 Docker 공식문서는 자주보았는데 Docker Overview는 그냥 슭 훑고 지나갔었다. 한국어로 치면 개요(?) 정도 이겠다. 그 곳에 있는 핵심내용을 정리해본다.
Basic 로컬에서 Docker를 사용할때 우리는 아주 손쉽게 docker ps, docker images 등의 명령어를 쳤기때문에 Docker 엔진의 작동방식을 잘 모르고 지나가는 경우가 많다. 간단하게 살펴보자.</description>
    </item>
    
    <item>
      <title>Golang Benchmark Test 사용하기</title>
      <link>https://aidanbae.github.io/code/golang/benchmark/</link>
      <pubDate>Sun, 13 May 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/benchmark/</guid>
      <description>Intro 코딩을 하다보면 내가 짠 함수의 성능이 좋은지 안좋은지 궁금할때가 많다. Golang에서는 testing 라이브러리를 기본적으로 제공하면서 유닛테스트를 지원하면서도 성능을 측정할 수 있는 벤치마크 테스트도 제공한다. 게임 쪽을 개발하다보면 최적화의 과정이 필요하기 때문에 benchmark test는 유용하게 사용된다.
 Why golang benchmark test 사용법을 익혀 자신 스스로와 팀원들을 설득할 수 있다.
 Usage 간단하게 두 수를 더하는 함수를 짜고 성능을 측정해보겠다.
package main import ( &amp;#34;testing&amp;#34; ) func Sum(a, b int) int { return a + b } func BenchmarkSum (b *testing.</description>
    </item>
    
    <item>
      <title>Hugo로 github page에 블로그 배포하기</title>
      <link>https://aidanbae.github.io/code/hugo/deploytutorial/</link>
      <pubDate>Mon, 23 Apr 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/hugo/deploytutorial/</guid>
      <description>Why? Hugo 공식사이트를 보다보면 뭔가 친절한듯 하지만 영어다.
테마 설정때문에 에러를 겪으시는 분들이 많아
쉽게 디렉팅해서 여러분들의 시간을 아껴주고싶다.
hugo 설치하기 Install hugo
hugo quickstart QuickStart 이거 따라하시면된다.
여기 Step3를 보면 git clone 대신 git submodule을 사용중이다. 님은 둘중 하나를 선택할 수 있는데 submodule을 쓰는 편이 암에서 해방되는 길이긴하다. 하지만 나처럼 이미 clone을 선택해서 테마를 받았다면 themes 디렉토리를 .gitignore에 추가해야한다.
echo &amp;#39;themes/&amp;#39; &amp;gt;&amp;gt; .gitignore config.toml파일을 수정하자 config.toml 파일에서 baseURL을 수정하자:</description>
    </item>
    
    <item>
      <title>메소스 마라톤(Mesos Marathon) 어플리케이션 사용하기 - 2</title>
      <link>https://aidanbae.github.io/code/devops/mesosmarathon/marathon2/</link>
      <pubDate>Thu, 15 Feb 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/mesosmarathon/marathon2/</guid>
      <description>Marathon Application Deployment 마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다. 배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.
 하나 이상의 어플리케이션을 시작 또는 중지 하나 이상의 어플리케이션을 업그레이드 하나 이상의 어플리케이션을 스케일조정  배포에는 시간이 걸리고 즉시 사용할 수 없습니다.
성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.
 종속성 종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다. 하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.</description>
    </item>
    
    <item>
      <title>메소스 마라톤(Mesos Marathon) 어플리케이션 사용하기 - 1</title>
      <link>https://aidanbae.github.io/code/devops/mesosmarathon/marathon1/</link>
      <pubDate>Sun, 11 Feb 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/mesosmarathon/marathon1/</guid>
      <description>Mesos Marathon - Application Basic 어플리케이션은 마라톤의 필수 기능입니다. 각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다. 어플리케이션 인스턴스를 Task라고 부릅니다. Application Definition은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다.
주의사항 &amp;gt; Marathon은 어플리케이션 이름에 점(.)을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.
정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요.
같이 한번 도전해보겠습니다.</description>
    </item>
    
    <item>
      <title>Javascript Console 활용</title>
      <link>https://aidanbae.github.io/code/javascript/console/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/console/</guid>
      <description>Intro 자바스크립트를 쓰면서 웹어플리케이션을 만들다보면 Debug를 위해 console객체를 자주 사용하게됩니다. 간혹 잘못 사용해서 잘못된 정보를 본다면&amp;hellip; 삽질의 시작이죠
Why Console 객체의 주의해야할 점과 좋은 활용법을 터득해 즐거운 디버깅을 해봅시다.
 console.log 자바스크립트 개발자라면 너무 친숙한녀석이죠.
console.log(obj1 [, obj2, ..., objN]); console.log(msg [, subst1, ..., substN]);  보시는 것처럼 객체와 메세지 등 다양한 인자값을 출력하는데 사용합니다.
주의할점은 객체를 로깅할때입니다. 우선 string 변수를 로깅해봅시다.
var sangik = &amp;#34;상익아 뭐하니&amp;#34; console.log(sangik); // 상익아 뭐하니 sangik = &amp;#34;what are you doing?</description>
    </item>
    
    <item>
      <title>Python 연산자 오버로딩을 활용하기</title>
      <link>https://aidanbae.github.io/code/python/pythonspecialmethod/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/python/pythonspecialmethod/</guid>
      <description>Intro Top of Tower GameServer(이하 tot)를 Python + Django 스택으로 구현하면서
가을과 겨울 사이에 Mason과 같이 공부한 Fluent Python을 프로젝트에 녹여볼려고 했다.
파이썬을 파볼 생각이라면 강력 추천
Mason과 Fluent Python(전문가를 위한 파이썬) 스터디를 진행하면서 Chapter13에서 연산자 오버로딩을 만났다. 사실 우리는 연산자를 숫자연산에만 사용하는 경향이 있다. 연산자는 논리표현 중 하나고 우리는 논리 표현으로서 더 새롭게 정의할 수 있다. 행렬의 곱이 숫자의 곱과 방식이 조금 다르듯, 게임 캐릭터에 써보는게 좋겠다는 이야기가 나왔다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Bridge</title>
      <link>https://aidanbae.github.io/code/golang-design/bridge/</link>
      <pubDate>Fri, 03 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/bridge/</guid>
      <description>브릿지 패턴 Bridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.
두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.
제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데 이해가 더 어렵다고 생각해 좋은 예제를 찾다가
게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바) http://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4
여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다.
위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다. 의존관계는 이 인터페이스들 간에만 존재합니다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Command</title>
      <link>https://aidanbae.github.io/code/golang-design/command/</link>
      <pubDate>Wed, 01 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/command/</guid>
      <description>그림판이나 Photoshop을 사용해본 경험이 있다면!
Ctrl+z키라는 마법의 주문 으로 우리는 우리가 했던 액션들을 취소해본 경험 유! 요구사항에 대한 캡슐화와
요구사항을 큐에 저장하거나 기록,취소 할수 있다는 장점!
  명령패턴 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴 그땐 왜이렇게 어렵게 느껴졌었는지..
 유저의 요청사항(명령) 캡슐화! 요청사항과 큐를 이용해서 작업내역을 관리!  그냥 가볍게 위 두가지만 생각하면 편하다. 우선 Command Interface를 구현해보자. 스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없다. 실수가 많은 나는 Ctrl+z의 광팬, 도전해보자.</description>
    </item>
    
    <item>
      <title>쉘 스크립트(shell script) - read, echo_back</title>
      <link>https://aidanbae.github.io/code/shell/bash1/</link>
      <pubDate>Mon, 11 Sep 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/shell/bash1/</guid>
      <description>유닉스 리눅스 쉘스크립트 공부 서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는
생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해
진다는 것은 팩트. 레츠 Do
https://opentutorials.org/course/2598/14204 생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움
echo $0 // 결과: -bash 터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다. Bash도 일종의 프로그램입니다. 우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - reduce, findIndex, find</title>
      <link>https://aidanbae.github.io/code/javascript/array2/</link>
      <pubDate>Wed, 12 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array2/</guid>
      <description>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.
이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.
reduce 이 녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다. 집중해서 내껄로 만들어보죠.
reduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해 하나의 값으로 줄입니다. 누적 계산값이라는 단어가 포인트!
arr.reduce(callback[, initialValue]) 우선 파라미터부터 알아볼까요
 첫번째 인자 callback(accumulator, currentValue, currentIndex, array) 두번째 인자 initialValue // optional  콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - forEach, map, filter</title>
      <link>https://aidanbae.github.io/code/javascript/array1/</link>
      <pubDate>Tue, 11 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array1/</guid>
      <description>HTML5 게임들을 만들면서 가장 유용하고 자주 사용한 자료구조 배열입니다.
push` pop shift unshift`등의 기본 함수들을 사용해 손쉽게 데이터를 조작할 수 있습니다. 더 나아가 멋지게 배열들을 다룰 수 있는 중급 내장함수들을 만나보겠습니다.
 기본으로 제공되는 함수를 배움으로서 생산성이 향상됩니다.
자바스크립트는 Array객체를 제공합니다.
배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.
전역객체인 Array를 쉽게 다루기 위한 표준내장함수 들을 공부해봅시다.
 forEach 해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.
array.forEach(callback [, thisArg]) 첫번째 인자 callback(item, index, array) 두번째 인자 thisArg // 콜백함수 사용시 this로서 사용되는 값</description>
    </item>
    
  </channel>
</rss>